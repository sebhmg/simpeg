#SimPEG: Simulation and Parameter Estimation in Geophysics
#
#SimPEG is a python package for simulation and gradient based
#parameter estimation in the context of geophysical applications.

[tool.poetry]
name = "simpeg_archive"
version = "0.11.0.1"
license = "MIT"
description = "Mira fork of SimPEG: Simulation and Parameter Estimation in Geophysics"

authors = ["Rowan Cockett <rowanc1@gmail.com>"]
repository = "http://github.com/simpeg/simpeg"
documentation = "https://docs.simpeg.xyz/"
homepage = "http://simpeg.xyz/"
readme = "README.rst"
keywords = ["geophysics inverse problem"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Natural Language :: English",
]

exclude = ["tests*", "examples*", "tutorials*"]

[tool.poetry.dependencies]
discretize = "*"
numpy = ">=1.7"
properties = {version = ">= 0.3.1b2", extras = ["math"]}
pymatsolver = ">=0.1.1"
scipy = ">=0.13"

# use "regular" in extras to get required matplotlib.
# It is not actually optional, but it needs to be excluded for building geoapps
# as matplotlib resolves to a different package name through Conda and through pip.
# geoapps takes care of placing explicitly matplotlib in its requirements.
matplotlib = { version = "*", optional = true }

[tool.poetry.dev-dependencies]
nose = "*"
nose-cov = "*"
pillow = "*"
pylint = "*"
pytest = "*"
sphinx = "1.5.6"
sphinx-gallery = "*"
sphinx_rtd_theme = "*"
sympy = "*"

[tool.poetry.extras]
regular = ["matplotlib"]

[tool.conda-lock]
platforms = ['win-64', 'osx-64', 'linux-64']
channels = ['conda-forge', 'defaults']

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
